name: Deploy Kiro Web Mind

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'web'
        type: choice
        options:
        - web
        - extension
        - all

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  build-web:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_target == 'web' || github.event.inputs.deploy_target == 'all' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create production environment file
      run: |
        echo "NEXT_PUBLIC_APP_ENV=production" >> .env.production
        echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.production
        echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env.production
        echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.production
        echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.production
        echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env.production
        echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env.production
        
    - name: Build web application
      run: npm run build:production
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: out/
        retention-days: 7

  build-extension:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_target == 'extension' || github.event.inputs.deploy_target == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Chrome extension
      run: npm run extension:build
      
    - name: Package Chrome extension
      run: npm run extension:package
      
    - name: Upload extension artifacts
      uses: actions/upload-artifact@v3
      with:
        name: extension-package
        path: dist/packages/
        retention-days: 30

  deploy-web:
    needs: [test, build-web]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deploy_target == 'web' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == '')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: out/
        
    - name: Setup Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy to Firebase
      run: firebase deploy --only hosting,functions,firestore --token ${{ secrets.FIREBASE_TOKEN }}
      env:
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        
    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: Web Application" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  performance-test:
    needs: deploy-web
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
        
  notify:
    needs: [deploy-web, build-extension]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-web.result }}" == "success" ]; then
          echo "‚úÖ Web deployment successful"
        else
          echo "‚ùå Web deployment failed"
        fi
        
        if [ "${{ needs.build-extension.result }}" == "success" ]; then
          echo "‚úÖ Extension build successful"
        else
          echo "‚ùå Extension build failed"
        fi